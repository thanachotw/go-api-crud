// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "go-wallet-api/internal/core/domain"
	wallet "go-wallet-api/internal/adapters/repository/wallet"
	mock "github.com/stretchr/testify/mock"
)

// MockWalletRepository is an autogenerated mock type for the WalletRepository type
type MockWalletRepository struct {
	mock.Mock
}

type MockWalletRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletRepository) EXPECT() *MockWalletRepository_Expecter {
	return &MockWalletRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: walletModel
func (_m *MockWalletRepository) Create(walletModel *wallet.Wallet) error {
	ret := _m.Called(walletModel)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*wallet.Wallet) error); ok {
		r0 = rf(walletModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRepository_Create_Call provides a mock function with given fields: walletModel
type MockWalletRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - walletModel *wallet.Wallet
func (_e *MockWalletRepository_Expecter) Create(walletModel interface{}) *MockWalletRepository_Create_Call {
	return &MockWalletRepository_Create_Call{Call: _e.mock.On("Create", walletModel)}
}

func (_c *MockWalletRepository_Create_Call) Run(run func(walletModel *wallet.Wallet)) *MockWalletRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*wallet.Wallet))
	})
	return _c
}

func (_c *MockWalletRepository_Create_Call) Return(_a0 error) *MockWalletRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepository_Create_Call) RunAndReturn(run func(*wallet.Wallet) error) *MockWalletRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockWalletRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRepository_Delete_Call provides a mock function with given fields: id
type MockWalletRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *MockWalletRepository_Expecter) Delete(id interface{}) *MockWalletRepository_Delete_Call {
	return &MockWalletRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockWalletRepository_Delete_Call) Run(run func(id uint)) *MockWalletRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockWalletRepository_Delete_Call) Return(_a0 error) *MockWalletRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepository_Delete_Call) RunAndReturn(run func(uint) error) *MockWalletRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ownerId
func (_m *MockWalletRepository) GetByID(ownerId uint) (*domain.Wallet, error) {
	ret := _m.Called(ownerId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Wallet, error)); ok {
		return rf(ownerId)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Wallet); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Wallet)
		}
		}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletRepository_GetByID_Call provides a mock function with given fields: ownerId
type MockWalletRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ownerId uint
func (_e *MockWalletRepository_Expecter) GetByID(ownerId interface{}) *MockWalletRepository_GetByID_Call {
	return &MockWalletRepository_GetByID_Call{Call: _e.mock.On("GetByID", ownerId)}
}

func (_c *MockWalletRepository_GetByID_Call) Run(run func(ownerId uint)) *MockWalletRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockWalletRepository_GetByID_Call) Return(_a0 *domain.Wallet, _a1 error) *MockWalletRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletRepository_GetByID_Call) RunAndReturn(run func(uint) (*domain.Wallet, error)) *MockWalletRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: walletModel
func (_m *MockWalletRepository) Update(walletModel *wallet.Wallet) error {
	ret := _m.Called(walletModel)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*wallet.Wallet) error); ok {
		r0 = rf(walletModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRepository_Update_Call provides a mock function with given fields: walletModel
type MockWalletRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - walletModel *wallet.Wallet
func (_e *MockWalletRepository_Expecter) Update(walletModel interface{}) *MockWalletRepository_Update_Call {
	return &MockWalletRepository_Update_Call{Call: _e.mock.On("Update", walletModel)}
}

func (_c *MockWalletRepository_Update_Call) Run(run func(walletModel *wallet.Wallet)) *MockWalletRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*wallet.Wallet))
	})
	return _c
}

func (_c *MockWalletRepository_Update_Call) Return(_a0 error) *MockWalletRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepository_Update_Call) RunAndReturn(run func(*wallet.Wallet) error) *MockWalletRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWalletRepository creates a new instance of MockWalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletRepository {
	mock := &MockWalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
